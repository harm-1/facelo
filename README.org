* docker commands
** Open a shell in the running container. 
   docker exec -it facelo_backend_1 /bin/bash
** Run commands using the flask CLI:
   docker-compose run --rm manage <<command>>
   docker-compose run --rm manage flask shell
   docker-compose run --rm manage flask db (init/migrate/upgrade...)
   docker-compose run --rm manage flask test
   docker-compose run --rm manage flask lint
   docker-compose run --rm manage monkeytype run flask run --host 0.0.0.0
   docker-compose run --rm manage pytest tests/
** Connect to the database from the cli
   fooo@bar:~$ docker-compose exec database mysql -ufacelo -ppassword
** Rebuild the image when dependencies change or the Dockerfile is modified. 
   $ docker-compose build
** Rebuild with newer images
   docker-compose build --pull
** Running the backend with pdb
   docker-compose up -d manage && docker attach facelo_manage_1
   doco run --rm --service-ports manage
*** about
    the first one is necesary when the frontend service is started as well.
    It starts the container with right name in that case.

    The second one is simpeler and more elegant because its 1 command.
    

* Pipenv
** Start pipenv
   pipenv shell
** remove accidental shell
   pipenv --rm
   rm Pipfile
** Install in pipenv
   # add to pipfile
   docker-compose run --rm manage pipenv lock
   docker-compose build
   
* Package.jsonn
** Upgrade node/npm to newest version
   docker-compose build --pull


* Change database env vars
  docker-compose down
  docker volume rm facelo_db_data 
  docker-compose build
  docker-compose up ...
  

